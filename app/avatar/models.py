# -*- coding: utf-8 -*-
"""Define the Avatar models.

Copyright (C) 2021 Gitcoin Core

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

"""

import logging
from io import BytesIO
from secrets import token_hex
from tempfile import NamedTemporaryFile

from django.conf import settings
from django.contrib.postgres.fields import ArrayField, JSONField
from django.core.files import File
from django.core.files.base import ContentFile
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.translation import gettext_lazy as _

from economy.models import SuperModel
from PIL import Image
from svgutils.compose import Figure, Line

from .utils import build_avatar_component, convert_img, convert_wand, dhash, get_temp_image_file, get_upload_filename

logger = logging.getLogger(__name__)


class BaseAvatar(SuperModel):
    """Store the options necessary to render a Gitcoin avatar."""

    ICON_SIZE = (215, 215)

    active = models.BooleanField(default=False)
    profile = models.ForeignKey(
        'dashboard.Profile',
        null=True,
        on_delete=models.CASCADE,
        related_name="%(app_label)s_%(class)s_related",
        blank=True
    )
    svg = models.FileField(upload_to=get_upload_filename, null=True, blank=True, help_text=_('The avatar SVG.'))
    png = models.ImageField(upload_to=get_upload_filename, null=True, blank=True, help_text=_('The avatar PNG.'), )
    hash = models.CharField(max_length=256)
    autogenerated = models.BooleanField(default=False)

    def __str__(self):
        """Return the str representing this avatar."""
        return f"{self.profile} created {self.created_on}"

    @property
    def avatar_url(self):
        """Return the appropriate avatar URL."""
        if self.png:
            return self.png.url
        if self.svg:
            return self.svg.url
        return ''

    def get_avatar_url(self):
        """Get the Avatar URL.

        """
        try:
            self.svg.url
        except ValueError:
            pass

        try:
            handle = self.profile.handle
        except Exception:
            handle = 'Self'

        return f'{settings.BASE_URL}dynamic/avatar/{handle}'

    @staticmethod
    def calculate_hash(image):
        return dhash(image)

    def find_similar(self):
        if self.hash:
            return BaseAvatar.objects.filter(profile=self.profile, hash=self.hash).last()

    def convert_field(self, source, input_fmt, output_fmt, height=215, width=215, preferred_method='', extra_flags=''):
        """Handle converting from the source field to the target based on format."""
        try:
            # Convert the provided source to the specified output and store in BytesIO.
            if output_fmt == 'svg':
                tmpfile_io = convert_wand(source, input_fmt=input_fmt, output_fmt=output_fmt)
            else:
                tmpfile_io = convert_img(
                    source,
                    input_fmt=input_fmt,
                    output_fmt=output_fmt,
                    height=height,
                    width=width,
                    preferred_method=preferred_method,
                    extra_flags=extra_flags
                )
            if self.profile:
                png_name = self.profile.handle
            else:
                png_name = token_hex(8)

            if tmpfile_io:
                converted_avatar = ContentFile(tmpfile_io.getvalue())
                converted_avatar.name = f'{png_name}.{output_fmt}'
                return converted_avatar
        except Exception as e:
            logger.error('Error: (%s) - Avatar PK: (%s)', str(e), self.id)

    def determine_response(self, use_svg=True):
        """Determine the content type and file to serve.

        Args:
            use_svg (bool): Whether or not to use SVG format.

        """
        try:
            if not use_svg and bool(self.png):
                return self.png.file, 'image/png'
            elif bool(self.svg):
                return self.svg.file, 'image/svg+xml'
        except:
            return None, None

        return None, None


class CustomAvatar(BaseAvatar):
    recommended_by_staff = models.BooleanField(default=False)
    style = models.CharField(max_length=10, default='original')
    config = JSONField(default=dict, help_text=_('The JSON configuration.'))

    @classmethod
    def create(cls, profile, config_json):
        avatar = cls(profile=profile, config=config_json, )
        avatar.create_from_config()
        try:
            avatar_png = avatar.convert_field(avatar.svg, 'svg', 'png')
            avatar.png = avatar_png
            avatar.hash = BaseAvatar.calculate_hash(Image.open(BytesIO(avatar.png.read())))
            similar_avatar = avatar.find_similar()
            if similar_avatar:
                return similar_avatar
        except Exception as e:
            logger.warning("There was error during avatar conversion")
        return avatar

    @classmethod
    def create_3d(cls, profile, params, svg):
        avatar = cls(profile=profile, config=params, style='3d', svg=svg)

        with NamedTemporaryFile(mode='w+', suffix='.svg') as tmp:
            tmp.write(svg)
            tmp.flush()
            with open(tmp.name) as file:
                svg_name = profile.handle if profile and profile.handle else token_hex(8)
                avatar.svg.save(f"{svg_name}.svg", File(file), save=False)

        try:
            avatar_png = avatar.convert_field(
                avatar.svg,
                'svg',
                'png',
                height=1000,
                width=1000,
                preferred_method='inkscape',
                extra_flags='--export-area-drawing'
            )
            avatar.png = avatar_png
            avatar.hash = BaseAvatar.calculate_hash(Image.open(BytesIO(avatar.png.read())))
            similar_avatar = avatar.find_similar()
            if similar_avatar:
                return similar_avatar
        except Exception as e:
            logger.warning("There was error during avatar conversion")
            logger.exception(e)
        return avatar

    def select(self, profile):
        new_avatar = CustomAvatar(profile=profile, config=self.config, svg=self.svg, png=self.png, hash=self.hash)
        similar_avatar = new_avatar.find_similar()
        if similar_avatar:
            return similar_avatar
        return new_avatar

    def create_from_config(self):
        """Create an avatar SVG from the configuration.

        TODO:
            * Deprecate in favor of request param based view using templates.

        """
        payload = self.config
        icon_width = self.ICON_SIZE[0]
        icon_height = self.ICON_SIZE[1]

        components = [
            icon_width, icon_height,
            Line([(0, icon_height / 2), (icon_width, icon_height / 2)],
                 width=f'{icon_height}px',
                 color=f"#{payload.get('Background')}")
        ]

        for k, v in payload.items():
            if k not in ['Background', 'ClothingColor', 'HairColor', 'SkinTone']:
                components.append(
                    build_avatar_component(f"{v.get('component_type')}/{v.get('svg_asset')}", self.ICON_SIZE)
                )

        with NamedTemporaryFile(mode='w+', suffix='.svg') as tmp:
            profile = None
            avatar = Figure(*components)
            avatar.save(tmp.name)
            with open(tmp.name) as file:
                if self.profile:
                    profile = self.profile

                svg_name = profile.handle if profile and profile.handle else token_hex(8)
                self.svg.save(f"{svg_name}.svg", File(file), save=False)

    def to_dict(self):
        return self.config

    def __str__(self):
        """Return the str representing this avatar."""
        return f"{self.profile} created {self.created_on}"


class SocialAvatar(BaseAvatar):

    @classmethod
    def github_avatar(cls, profile, avatar_img):
        avatar_hash = BaseAvatar.calculate_hash(avatar_img)
        avatar = cls(profile=profile, hash=avatar_hash)
        similar_avatar = avatar.find_similar()
        if similar_avatar:
            return similar_avatar
        avatar.png.save(f'{profile.handle}.png', ContentFile(get_temp_image_file(avatar_img).getvalue()), save=True)
        avatar.svg = avatar.convert_field(avatar.png, 'png', 'svg')
        return avatar


@receiver(post_save, sender=SocialAvatar, dispatch_uid="psave_avatar")
@receiver(post_save, sender=CustomAvatar, dispatch_uid="psave_avatar2")
def psave_avatar(sender, instance, **kwargs):
    if kwargs['raw']:  # Skip adding updated_avatar activity if loading avatars from fixture
        return
    from dashboard.models import Activity
    metadata = {'url': instance.png.url if getattr(instance, 'png', False) else None, }
    Activity.objects.create(profile=instance.profile, activity_type='updated_avatar', metadata=metadata)


class AvatarTextOverlayInput(SuperModel):

    active = models.BooleanField(default=False, db_index=True)
    text = models.TextField(default='', blank=True)
    coment = models.TextField(default='', blank=True)
    num_uses_total = models.IntegerField(default=0)
    num_uses_remaining = models.IntegerField(default=0)
    current_uses = models.IntegerField(default=0)

    def __str__(self):
        return f"{self.pk} / {self.text} / {self.coment}"


class AvatarTheme(SuperModel):
    """Store diff avatar theme types."""

    active = models.BooleanField(default=False, db_index=True)
    name = models.CharField(max_length=256)
    description = models.TextField(default='', blank=True)
    artist_bio = models.TextField(default='', blank=True)
    popularity = models.IntegerField(default=0, db_index=True)
    tags = ArrayField(models.CharField(max_length=200), blank=True, default=list)
    img_url = models.CharField(max_length=256)
    popularity_cheat_by = models.IntegerField(
        default=0, db_index=True, help_text="Used by admin to rank avatar higher (or lower)."
    )
    override_name_ui = models.CharField(max_length=256, default='', blank=True)

    def __str__(self):
        """Return the str representing this avatar."""
        return f"{self.humanized_name}, Active {self.active} -- {self.popularity} created"

    @property
    def url(self):
        return f'/onboard/profile?steps=avatar&theme={self.name}'

    @property
    def humanized_name(self):
        base_name = self.name if not self.override_name_ui else self.override_name_ui
        return base_name.title().replace('_', ' ')

    def get_absolute_url(self):
        return self.url
